* Criar threads (passive e ativa): 
  A thread passiva sera responsavel por receber "ordens", enquanto a ativa
  vai submeter ordens.
  
  Na inicializacao as duas threads sao criadas. Quando o processo for master ele
  vai enviar requisicao para todos os slaves, desta forma ficando todo mundo preparado. 
  Caso o processo for slave, a thread passiva vai ficar aguradando o master.
  
  Master
    Thread ativa = envia requisicao para slaves
    Thread passiva = aguarda resposta de slaves
    
  Slaves
    Thread ativa = envia resposta para master
    Thread passiva = aguarda ordens do master


* Usar variaveis condicionais. engine coloca valor em buffer compartilhado, ativa variavel
condicional, remote pega lock e usa buffer, limpando buffer e alterando status do slave_status
usado.


Talvez trocar o status de EXECUTING para EXECUTING_REMOTE



Mensagens

MASTER										SLAVE
NEW_TASK									OK (status: WAITING_TASK_DESC)
TASK_DESC									OK (status: EXECUTING)
									OK (status: EXECUTING)
---
continue executing

MASTER										SLAVE
NEW_TASK (recv OK)				OK (recv WAITING_TASK_DESC)
TASK_DESC (recv OK)				OK (recv WAITING_TASK_DATA)


MASTER																			SLAVE
send(NEW_TASK) - wait(OK)										wait(NEW_TASK) - send(OK) - wait(TASK_DESC)
send(TASK_DESC) - wait(OK) - wait(RESULT)		send(OK) - execute_task... - send(RESULT)





Agora
MASTER												SLAVE
recv(ok)											send(ok)
send(new task)								rec(new task)
recv(ok)											send(ok)
send(task desc)								rec(new task)
wait(ok)											send(ok)
wait(result)


----
1 - Caso não haja slave disponível, criar thread e ficar em modo de espera por um slave
2 - Fazer computação no slave
3 - Retornar resultado
4 - Atualizar valores nas estruturas atuais e status do job como terminado

athread_create do remote soh envia dado pro slave e termina a thread
athread_join do slave faz requizicao do slave e depois marca slave como free

Colodar recv do result no athread_join

